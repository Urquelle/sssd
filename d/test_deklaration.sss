##(
    INFO: anforderung soll eine Schnittstelle beschreiben, die f√ºr einen Datentypen implementiert
          werden kann.

Numerisch || anforderung {
    operator¬ª<¬´ || (T )
}

##)

Art || option {
    Eins.
    Zwei | text.
    Drei | Vektor2 = { /x = 15 }
}

## variablendeklarationen
abc1 | Vektor2.

## mit datentypherleitung
abc2 |= 12.
abc3 | Vektor2 = { /x = 123,45 }.

#! xyz2(10).

xyz || (a| g32 = -314; b| d64; c| n32 = 15) -> g32.

xyz2 || (a| g32) -> g32
{
    res a + 10.
}

zyx || (b| [10] Vektor2; c| *g32; yy| (z1| g32) -> g32) -> Vektor2
{
    a |= 314.

    solange a > 0 {
        a = a - 1.
    }

    x1 | Vektor2 = {
        /x = 10; /y = 15;
    }.

    final x1/x = 12.

    x2 |= {
        /x = 10; /y = 15;
    } <Vektor2>.

    xyz(a; 35,014; x1/x).

    ## INFO: zerlegungbeispiel mit einer bereits vorher definierten variablen _x,
    ##       und einer neuen variablen _y

    ##( zerlegung
    _x |= 5.
    (_x; _y| g32) = x1.
    ##)

    t |= ¬ªEin Text wurde hier eingegeben¬´.
    üéÇ |= ¬ªGeburtsdatum ist 18.06¬´.

    ## mustervergleich
    weiche x2 {
        { /x = 11 } => {
            ## eigenschaftszugriff
            x1/x = 15.
        }
    }

    ## variable mit unbenanntem datentyp
    anon |= {
        /r = 128;
        /g = 128;
        /b = 128;
        /a = 256;
    }.

    schieb_links  |= 1 <| 5.
    schieb_rechts |= 1 |> 5.

    ##(
        folgende r√ºckgabe geht nicht, da kein datentyp angegeben ist. ich will aber, dass es funktioniert und der
        datentyp aus dem r√ºckgabetyp der funktion hergeleitet wird.
    ##)
    res {
        /x = a; /y = 15
    }.
}

Vektor2 || schablone {
    x, y| d32.

    z| *Vektor2.
}
